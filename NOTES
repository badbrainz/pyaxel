WebSocket:

Base framing protocol, http://tools.ietf.org/html/rfc6455#section-5.2
----
ws-frame                = frame-fin           ; 1 bit in length
                          frame-rsv1          ; 1 bit in length
                          frame-rsv2          ; 1 bit in length
                          frame-rsv3          ; 1 bit in length
                          frame-opcode        ; 4 bits in length
                          frame-masked        ; 1 bit in length
                          frame-payload-length   ; either 7, 7+16,
                                                 ; or 7+64 bits in
                                                 ; length
                          [ frame-masking-key ]  ; 32 bits in length
                          frame-payload-data     ; n*8 bits in
                                                 ; length, where
                                                 ; n >= 0

frame-fin               = %x0 ; more frames of this message follow
                        / %x1 ; final frame of this message
                              ; 1 bit in length

frame-rsv1              = %x0 / %x1
                          ; 1 bit in length, MUST be 0 unless
                          ; negotiated otherwise

frame-rsv2              = %x0 / %x1
                          ; 1 bit in length, MUST be 0 unless
                          ; negotiated otherwise

frame-rsv3              = %x0 / %x1
                          ; 1 bit in length, MUST be 0 unless
                          ; negotiated otherwise

frame-opcode            = frame-opcode-non-control /
                          frame-opcode-control /
                          frame-opcode-cont

frame-opcode-cont       = %x0 ; frame continuation

frame-opcode-non-control= %x1 ; text frame
                        / %x2 ; binary frame
                        / %x3-7
                        ; 4 bits in length,
                        ; reserved for further non-control frames

frame-opcode-control    = %x8 ; connection close
                        / %x9 ; ping
                        / %xA ; pong
                        / %xB-F ; reserved for further control
                                ; frames
                                ; 4 bits in length

frame-masked            = %x0
                        ; frame is not masked, no frame-masking-key
                        / %x1
                        ; frame is masked, frame-masking-key present
                        ; 1 bit in length

frame-payload-length    = ( %x00-7D )
                        / ( %x7E frame-payload-length-16 )
                        / ( %x7F frame-payload-length-63 )
                        ; 7, 7+16, or 7+64 bits in length,
                        ; respectively

frame-payload-length-16 = %x0000-FFFF ; 16 bits in length

frame-payload-length-63 = %x0000000000000000-7FFFFFFFFFFFFFFF
                        ; 64 bits in length

frame-masking-key       = 4( %x00-FF )
                          ; present only if frame-masked is 1
                          ; 32 bits in length

frame-payload-data      = (frame-masked-extension-data
                           frame-masked-application-data)
                        ; when frame-masked is 1
                          / (frame-unmasked-extension-data
                            frame-unmasked-application-data)
                        ; when frame-masked is 0

frame-masked-extension-data     = *( %x00-FF )
                        ; reserved for future extensibility
                        ; n*8 bits in length, where n >= 0

frame-masked-application-data   = *( %x00-FF )
                        ; n*8 bits in length, where n >= 0

frame-unmasked-extension-data   = *( %x00-FF )
                        ; reserved for future extensibility
                        ; n*8 bits in length, where n >= 0

frame-unmasked-application-data = *( %x00-FF )
                        ; n*8 bits in length, where n >= 0


Close frame staus codes, http://tools.ietf.org/html/rfc6455#section-7.4.1
----
1000

   1000 indicates a normal closure, meaning that the purpose for
   which the connection was established has been fulfilled.

1001

   1001 indicates that an endpoint is "going away", such as a server
   going down or a browser having navigated away from a page.

1002

   1002 indicates that an endpoint is terminating the connection due
   to a protocol error.

1003

   1003 indicates that an endpoint is terminating the connection
   because it has received a type of data it cannot accept (e.g., an
   endpoint that understands only text data MAY send this if it
   receives a binary message).

1004

   Reserved.  The specific meaning might be defined in the future.

1005

   1005 is a reserved value and MUST NOT be set as a status code in a
   Close control frame by an endpoint.  It is designated for use in
   applications expecting a status code to indicate that no status
   code was actually present.

1006

   1006 is a reserved value and MUST NOT be set as a status code in a
   Close control frame by an endpoint.  It is designated for use in
   applications expecting a status code to indicate that the
   connection was closed abnormally, e.g., without sending or
   receiving a Close control frame.

1007

   1007 indicates that an endpoint is terminating the connection
   because it has received data within a message that was not
   consistent with the type of the message (e.g., non-UTF-8 [RFC3629]
   data within a text message).

1008

   1008 indicates that an endpoint is terminating the connection
   because it has received a message that violates its policy.  This
   is a generic status code that can be returned when there is no
   other more suitable status code (e.g., 1003 or 1009) or if there
   is a need to hide specific details about the policy.

1009

   1009 indicates that an endpoint is terminating the connection
   because it has received a message that is too big for it to
   process.

1010

   1010 indicates that an endpoint (client) is terminating the
   connection because it has expected the server to negotiate one or
   more extension, but the server didn't return them in the response
   message of the WebSocket handshake.  The list of extensions that
   are needed SHOULD appear in the /reason/ part of the Close frame.
   Note that this status code is not used by the server, because it
   can fail the WebSocket handshake instead.

1011

   1011 indicates that a server is terminating the connection because
   it encountered an unexpected condition that prevented it from
   fulfilling the request.

1015

   1015 is a reserved value and MUST NOT be set as a status code in a
   Close control frame by an endpoint.  It is designated for use in
   applications expecting a status code to indicate that the
   connection was closed due to a failure to perform a TLS handshake
   (e.g., the server certificate can't be verified).

7.4.2.  Reserved Status Code Ranges

0-999

   Status codes in the range 0-999 are not used.

1000-2999

   Status codes in the range 1000-2999 are reserved for definition by
   this protocol, its future revisions, and extensions specified in a
   permanent and readily available public specification.

3000-3999

   Status codes in the range 3000-3999 are reserved for use by
   libraries, frameworks, and applications.  These status codes are
   registered directly with IANA.  The interpretation of these codes
   is undefined by this protocol.

4000-4999

   Status codes in the range 4000-4999 are reserved for private use
   and thus can't be registered.  Such codes can be used by prior
   agreements between WebSocket applications.  The interpretation of
   these codes is undefined by this protocol.


METALINK:

Metalink 3.0, http://en.wikipedia.org/wiki/Metalink#Example_Metalink_3.0_.metalink_file
----
<?xml version="1.0" encoding="UTF-8"?>
<metalink xmlns="urn:ietf:params:xml:ns:metalink">
    <file name="example.ext">
        <size>14471447</size>
        <url>ftp://ftp.example.com/example.ext</url>
        <url>http://example.com/example.ext</url>
        <metaurl mediatype="torrent">http://example.com/example.ext.torrent</metaurl>
    </file>
</metalink>


Metalink 4.0, http://en.wikipedia.org/wiki/Metalink#Example_Metalink_4.0_.meta4_file
----
<?xml version="1.0" encoding="UTF-8"?>
<metalink xmlns="urn:ietf:params:xml:ns:metalink">
    <published>2009-05-15T12:23:23Z</published>
    <file name="example.ext">
        <size>14471447</size>
        <identity>Example</identity>
        <version>1.0</version>
        <language>en</language>
        <description>A description of the example file for download.</description>
        <hash type="sha-256">f0ad929cd259957e160ea442eb80986b5f01...</hash>
        <url location="de" priority="1">ftp://ftp.example.com/example.ext</url>
        <url location="fr" priority="1">http://example.com/example.ext</url>
        <metaurl mediatype="torrent" priority="2">http://example.com/example.ext.torrent</metaurl>
    </file>
    <file name="example2.ext">
        <size>14471447</size>
        <identity>Example2</identity>
        <version>1.0</version>
        <language>en</language>
        <description>Another description for a second file.</description>
        <hash type="sha-256">2f548ce50c459a0270e85a7d63b2383c5523...</hash>
        <url location="de" priority="1">ftp://ftp.example.com/example2.ext</url>
        <url location="fr" priority="1">http://example.com/example2.ext</url>
        <metaurl mediatype="torrent" priority="2">http://example.com/example2.ext.torrent</metaurl>
    </file>
</metalink>
